{{page-title "addCal"}}

{{#each this.model as |seats| }}

{{!-- <h2>{{seats.seat_booked}}</h2>
<h2>{{seats.name}}</h2>
<h2>{{seats.email}}</h2>
<h2>{{seats.price}}</h2>
<h2>{{seats.bus_no}}</h2> --}}

<center>
<br><br>
<table border="1" cellpadding="5" width="500">
    <tr>
        <th>
            User_ID
        </th>
        <th>
            User Name
        </th>
        <th>
            Email
        </th>
        <th>
            Ticket ID
        </th>
        <th>
            Bus No
        </th>
        <th>
            Price
        </th>
        <th>
            Add to Calendar
        </th>
    </tr>
      <td>{{seats.seat_booked}}</td><td>{{seats.name}}</td><td>{{seats.email}}</td><td>{{seats.seat_booked}}</td><td>{{seats.bus_no}}</td><td id="pr" value={{seats.price}}>{{seats.price}}</td>
      {{#if seats.google_sign_in}}
      <td><button id="{{seats.google_access_token}}" value="{{seats.google_access_token}}" type="button"  {{ action "AddToGoogleCal" seats.google_access_token }}>Add to Calendar</button></td>
      {{else}}
      <td><button id='authorize_button' onclick='handleAuthClick()' type="button">Add to calendar</button></td>
      {{/if}}
</table>
{{!-- {{seats.google_access_token}} --}}
</center>

{{/each}}

<br><br><br><center>
    <a href="Welcome"><button type="button" class="btn btn-light" data-mdb-ripple-color="dark" style="color: black; font-size: 20px;">HOME</button></a></center>
    <br><br>

<script>
  document.getElementById("authorize_button").addEventListener("click", function() {
    window.alert("SUccessfully added to google calendar!");
  });
</script>

    <script src="https://apis.google.com/js/platform.js"></script>
    {{!--Add buttons to initiate auth sequence and sign out--}}
    {{!--<button id="signout_button" onclick="handleSignoutClick()"></button>--}}

    <pre id="content" style="white-space: pre-wrap;"></pre>

    <script type="text/javascript">
      /* exported gapiLoaded */
      /* exported gisLoaded */
      /* exported handleAuthClick */
      /* exported handleSignoutClick */

      // TODO(developer): Set to client ID and API key from the Developer Console
      const CLIENT_ID = '816881978221-bjj2gg9r7gj8r4ddks56h6nionsqf70g.apps.googleusercontent.com';
      const API_KEY = 'AIzaSyAwBfLkX3VANOdhHa16tlJb8uPO5HblJwI';
      

      // Discovery doc URL for APIs used by the quickstart
      const DISCOVERY_DOC = 'https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest';

      // Authorization scopes required by the API; multiple scopes can be
      // included, separated by spaces.
      const SCOPES = 'https://www.googleapis.com/auth/calendar.readonly';

      let tokenClient;
      let gapiInited = false;
      let gisInited = false;

      document.getElementById('authorize_button').style.visibility = 'hidden';
      //document.getElementById('signout_button').style.visibility = 'hidden';

      /**
       * Callback after api.js is loaded.
       */
      function gapiLoaded() {
        gapi.load('client', intializeGapiClient);
      }

      /**
       * Callback after the API client is loaded. Loads the
       * discovery doc to initialize the API.
       */
      async function intializeGapiClient() {
        await gapi.client.init({
          apiKey: API_KEY,
          discoveryDocs: [DISCOVERY_DOC],
        });
        gapiInited = true;
        maybeEnableButtons();
      }

      /**
       * Callback after Google Identity Services are loaded.
       */
      function gisLoaded() {
        tokenClient = google.accounts.oauth2.initTokenClient({
          client_id: CLIENT_ID,
          scope: SCOPES,
          callback: '', // defined later
        });
        gisInited = true;
        maybeEnableButtons();
      }

      /**
       * Enables user interaction after all libraries are loaded.
       */
      function maybeEnableButtons() {
        if (gapiInited && gisInited) {
          document.getElementById('authorize_button').style.visibility = 'visible';
        }
      }

      /**
       *  Sign in the user upon button click.
       */
      function handleAuthClick() {
        tokenClient.callback = async (resp) => {
          if (resp.error !== undefined) {
            throw (resp);
          }
          //document.getElementById('signout_button').style.visibility = 'visible';
          //document.getElementById('authorize_button').innerText = 'Refresh';
          await listUpcomingEvents();
          await insertEvents();//insert events to calendar

        };

        if (gapi.client.getToken() === null) {
          // Prompt the user to select a Google Account and ask for consent to share their data
          // when establishing a new session.
          tokenClient.requestAccessToken({prompt: 'consent'});
        } else {
          // Skip display of account chooser and consent dialog for an existing session.
          tokenClient.requestAccessToken({prompt: ''});
        }
      }

  

      /**
       *  Sign out the user upon button click.
       */
      // function handleSignoutClick() {
      //   const token = gapi.client.getToken();
      //   if (token !== null) {
      //     google.accounts.oauth2.revoke(token.access_token);
      //     gapi.client.setToken('');
      //     document.getElementById('content').innerText = '';
      //     document.getElementById('authorize_button').innerText = 'Authorize';
      //     //document.getElementById('signout_button').style.visibility = 'hidden';
      //   }
      // }

      /**
       * Print the summary and start datetime/date of the next ten events in
       * the authorized user's calendar. If no events are found an
       * appropriate message is printed.
       */
      async function listUpcomingEvents() {
        let response;
        try {
          const request = {
            'calendarId': 'primary',
            'timeMin': (new Date()).toISOString(),
            'showDeleted': false,
            'singleEvents': true,
            'maxResults': 10,
            'orderBy': 'startTime',
          };
          response = await gapi.client.calendar.events.list(request);
        } catch (err) {
          document.getElementById('content').innerText = err.message;
          return;
        }

        const events = response.result.items;
        /*if (!events || events.length == 0) {
          document.getElementById('content').innerText = 'No events found.';
          return;
        }
        // Flatten to string to display
        const output = events.reduce(
            (str, event) => `${str}${event.summary} (${event.start.dateTime || event.start.date})\n`,
            'Events:\n');
        document.getElementById('content').innerText = output;
        */
      }

      // <%String name = request.getParameter("name");
      // String mail = request.getParameter("mail");%>
      // out.println(name);
      // out.println(mail);

      //console.log(name3);

      //const url_debug="http://localhost:8080/Vimal_Bus_Reservation2/User/db_tkt.jsp?name="+name3+"&mail="+mail2+"&ticket_no="+ticket_no2+"&bus_no="+bus_no2+"&price="+price2;
      //console.log(url_debug);

      //to get current date
      var startdate = new Date();
      var enddate = new Date();
      var DD = String(startdate.getDate()).padStart(2, '0');
      var MM = String(startdate.getMonth() + 1).padStart(2, '0'); //January is 0!
      var YYYY = startdate.getFullYear();
      startdate = YYYY +"-"+ MM +"-"+ DD+"T10:00:00.000-07:00";
      enddate= YYYY +"-"+ MM +"-"+ DD+"T10:25:00.000-07:00";
      console.log('Date-Time: ', startdate);
      console.log('Date-Time: ', enddate);

      //const url_debug="http://localhost:8080/Vimal_Bus_Reservation2/User/db_tkt.jsp?name="+name3+"&mail="+mail2+"&ticket_no="+ticket_no2+"&bus_no="+bus_no2+"&price="+price2;
      //console.log(url_debug);

      function addto_cal()
      {
        //console.log(window.localStorage.getItem('token_val')['access_token']);
        //let token_val = localStorage.getItem('token_val');
        //console.log(JSON.stringify(token_val));
        //console.log(JSON.parse(localStorage.getItem('token_val')));
        //document.write(window.localStorage.getItem('token_val'));

        //console.log(access_token2);

        //gapi.client.setToken({
          //access_token: access_token2
        //});

        // gapi.client.setToken(access_token2);

        // gapi.client.setToken({
        // access_token: JSON.parse(localStorage.getItem('token_val'))['access_token'],
        // });

        // gapi.client.setToken(window.localStorage.getItem('token_val'));

        console.log(gapi.client.getToken());

        try {
          var resource = {
            "summary": "Vimal Bus Booking",
            "location": "Chennai",
            "start": {
              "dateTime": startdate
            },
            "end": {
              "dateTime": enddate
              }
            };
            //window.gapi.auth.setToken({ access_token: access_token })
            var request = gapi.client.calendar.events.insert({
            'calendarId': 'primary',
            'resource': resource
          });
          request.execute(function(resp) {
            console.log(resp);
          });   
        } 
        
        catch (err) {
          document.getElementById('content').innerText = err.message;
          return;
        }
      }

        //'description': url_debug,
        var url_debug="http://localhost:4200/user/invoice";
        async function insertEvents() {
        let response;
        try {
          var resource = {
            "summary": "Vimal Bus Booking",
            "location": "Chennai",
            "description": "Ticket Confirmed",
            "start": {
              "dateTime": startdate
            },
            "end": {
              "dateTime": enddate
              }
            };
          var request = gapi.client.calendar.events.insert({
            'calendarId': 'primary',
            'resource': resource
          });
          request.execute(function(resp) {
            console.log(resp);
          });   
        } 
        
        catch (err) {
          document.getElementById('content').innerText = err.message;
          return;
        }
        }
      
    </script>
    <script async defer src="https://apis.google.com/js/api.js" onload="gapiLoaded()"></script>
    <script async defer src="https://accounts.google.com/gsi/client" onload="gisLoaded()"></script>



